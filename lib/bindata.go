// Code generated by go-bindata.
// sources:
// lib/templates/index.html
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x51\x73\xda\x46\x10\x7e\xcf\x8c\xff\xc3\x46\x8f\x6e\x85\x6a\x70\x8b\xdb\x4a\xcc\x10\x70\x6c\x1c\x27\xa6\x80\x9d\xba\x6f\xc7\xdd\xc2\x1d\x3e\xdd\x91\xbb\x45\x98\xba\xfc\xf7\x8e\x24\x50\x44\x4a\x32\x29\x0f\x82\xdb\xfd\x76\xef\xdb\xfd\x96\x55\xfc\xba\x7f\xd7\x9b\x3c\x0e\x2f\x41\x52\xaa\x3b\x27\xaf\xe2\xfc\x1b\x34\x33\xf3\x24\x40\x13\x74\x4e\x5e\x01\xc4\x12\x99\x28\x7e\x01\xc4\x29\x12\x03\x2e\x99\xf3\x48\x49\xb0\xa2\x59\x78\x11\x1c\xf8\x24\xd1\x32\xc4\x4f\x2b\x95\x25\xc1\x9f\xe1\x7d\x37\xec\xd9\x74\xc9\x48\x4d\x35\x06\xc0\xad\x21\x34\x94\x04\x83\xcb\x04\xc5\x1c\x0f\x43\x0d\x4b\x31\x09\x32\x85\xeb\xa5\x75\x54\x43\xaf\x95\x20\x99\x08\xcc\x14\xc7\xb0\x38\xfc\x08\xca\x28\x52\x4c\x87\x9e\x33\x8d\xc9\x59\x95\xe9\x75\x18\xc2\x44\x22\xb0\xa9\xcd\x10\x5a\x50\x64\x26\x36\xf7\x70\x9a\xae\x3c\x9d\x02\xb7\x29\xc2\x4c\x39\x4f\xa0\x0c\x90\x44\xc8\xeb\xfb\x1d\x98\xd9\x80\x25\x89\xae\x38\xef\x2f\x87\x3c\xa8\x8c\x39\x65\x33\x42\x77\x9a\x87\x78\x2c\x53\x86\x61\xe7\xe4\x55\xed\xe2\x37\xd6\x92\x27\xc7\x96\xa5\xa7\xb2\xdf\x32\xc2\x32\xcd\x52\x69\x14\xc0\x8c\x80\x54\x19\x35\x53\x28\xa0\x37\x1e\xd7\xe0\x5a\x99\x27\x70\xa8\x93\xc0\xd3\x46\xa3\x97\x88\x14\x80\x74\x38\x4b\x82\xbc\xb7\xfe\xb7\x28\x4a\xd9\x33\x17\xa6\x31\xdd\xdf\x96\x1f\xb8\x4d\xa3\xca\x10\xb5\x1a\xad\x46\x3b\xe2\xde\x7f\xb6\x35\x52\x65\x1a\xdc\xfb\x00\x94\x21\x9c\x3b\x45\x9b\x24\xf0\x92\xb5\x2e\xce\xc3\x37\x0f\x8f\x4a\x8d\x07\x6f\xf1\xdd\x99\xb8\x4a\x6f\x46\xdd\xa7\x0d\x5f\x5d\x77\xaf\x47\xf3\x56\xf3\x2e\xbd\xe7\xeb\x75\xdb\x9a\xd6\xe8\x51\xcc\xcf\x1f\xd8\x0f\xc3\x74\x3c\xf1\x7f\x47\xef\x7e\xb9\xc8\xa6\xe2\x72\x21\xcf\x57\x01\x70\x67\xbd\xb7\x4e\xcd\x95\x49\x02\x66\xac\xd9\xa4\x76\xe5\x2b\x55\x48\x91\xc6\x4e\x31\x0a\x5a\x79\x6b\x60\x84\x7e\xa5\x29\x8e\x4a\x47\x31\x66\x51\x35\x67\xf1\xd4\x8a\xcd\x3e\x54\x9e\x75\xfa\xca\x21\x27\xeb\x36\x70\x24\x83\x3c\xab\x90\xcd\xce\xc4\x12\xd3\x3b\x57\x69\x05\x88\x85\xca\x80\x6b\xe6\x7d\x12\x30\x8d\x8e\xa0\x78\x86\x2f\x2f\x8d\x22\x9d\xc3\x12\x0f\xff\x80\xb3\xeb\x2e\x91\xdb\x6e\xf7\xc4\x77\x19\x3c\x39\x6b\xe6\x9d\x23\x11\x4b\xe6\xfd\x5b\xa6\xf4\x76\x1b\x47\x3b\x54\x75\x6f\x24\x54\xb6\xe7\x16\xc9\x66\x8d\x66\x1f\x89\x29\xed\xeb\x56\x62\x53\x8d\x7b\x9a\xe5\xa1\x78\x86\x53\xeb\x04\x3a\x14\x9f\x29\xc5\x54\xfb\x47\x96\x06\x77\xc8\x97\x64\x67\x84\x9a\x91\xca\x70\xc8\x48\xc6\x11\xc9\xff\x00\xae\x99\x97\x0f\x4c\xaf\xf0\xa8\xb7\xd2\xe7\x98\x8b\x79\x6b\xbe\x70\xc5\x51\x8d\x43\xee\xab\x33\x8c\xa9\x26\x68\xf9\x79\x79\x71\xcc\xcc\x11\x1a\xb7\xca\xd3\x76\x1b\x93\xdb\xd7\xfe\xfd\xb2\xe4\x89\x45\x2e\x4a\xbd\xd6\x5c\x08\x12\xc7\x71\x55\xc9\xdf\x02\x7d\x4b\xe1\xaf\xc5\x94\x2d\x39\x82\x38\x68\x4b\x59\x37\x1a\xb1\xdd\x1e\x34\xae\x3e\xed\x51\x21\xfa\x77\xef\x8e\x1b\x96\xb1\x31\x77\x6a\x49\xb5\x15\xe2\x4b\x83\x77\xfc\xff\xaf\x8c\xc5\x97\x1b\x63\x71\x74\x61\x4c\xf8\xcf\x83\x3f\xd4\xf4\xa7\x66\xfb\x53\xb6\x59\x8c\xdf\xcf\xae\x17\x77\xef\xd9\xed\xd3\x6c\xf5\xf1\xe1\xf9\xaf\xe7\xfb\xa1\xe9\xdd\x74\xdb\xba\x99\xf6\x3e\x7e\x18\x2c\xaf\x7e\x4d\xaf\x7a\xfd\x8b\xf5\xd5\x87\x01\x1f\xf6\xdb\x93\x67\xf6\xf5\x85\x11\x47\x25\xfd\xdd\x4e\xd8\xf5\x26\x8e\x76\x2f\xa8\x7f\x03\x00\x00\xff\xff\x4a\x36\x57\x1c\xb2\x06\x00\x00")

func libTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_libTemplatesIndexHtml,
		"lib/templates/index.html",
	)
}

func libTemplatesIndexHtml() (*asset, error) {
	bytes, err := libTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/templates/index.html", size: 1714, mode: os.FileMode(438), modTime: time.Unix(1492787658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/templates/index.html": libTemplatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{libTemplatesIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
