// Code generated by go-bindata.
// sources:
// lib/templates/index.html
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xdf\x53\xdb\x46\x10\x7e\xcf\x4c\xfe\x87\x8b\x5e\x5b\x49\xc5\xd0\x42\x33\x92\x66\x28\xe6\x87\x09\x09\x14\x8c\x53\xfa\x76\xd6\xad\x74\x6b\x4e\x77\xca\xdd\xca\xc6\x75\xfd\xbf\x77\x24\xd9\xc2\x26\x86\x69\xfc\x20\x6b\x77\xbf\x6f\xe7\xdb\xdd\xbb\x55\xf4\xa1\x7f\x7d\x32\x7c\xb8\x39\x65\x92\x0a\x95\xbc\x7f\x17\xd5\xff\x4c\x71\x9d\xc7\x1e\x68\x2f\x79\xff\x8e\xb1\x48\x02\x17\xcd\x1b\x63\x51\x01\xc4\x59\x2a\xb9\x75\x40\xb1\x57\x51\xe6\x1f\x79\x5b\x31\x49\x54\xfa\xf0\xad\xc2\x69\xec\xfd\xe5\xdf\x1f\xfb\x27\xa6\x28\x39\xe1\x58\x81\xc7\x52\xa3\x09\x34\xc5\xde\xe0\x34\x06\x91\xc3\x36\x55\xf3\x02\x62\x6f\x8a\x30\x2b\x8d\xa5\x0d\xf4\x0c\x05\xc9\x58\xc0\x14\x53\xf0\x1b\xe3\x67\x86\x1a\x09\xb9\xf2\x5d\xca\x15\xc4\x7b\x5d\x26\x85\xfa\x91\x59\x50\xb1\xe7\x68\xae\xc0\x49\x00\xf2\x98\xb4\x90\xc5\x5e\xad\xcd\x7d\x0c\xc3\x82\x3f\xa5\x42\x07\x63\x63\xc8\x91\xe5\x65\x6d\xa4\xa6\x08\x3b\x47\xb8\x1f\xec\x07\x87\x61\xea\xdc\xb3\x2f\x28\x50\x07\xa9\x73\x1e\x43\x4d\x90\x5b\xa4\x79\xec\x39\xc9\xf7\x8f\x0e\xfc\x3f\x46\x0f\x88\x77\x83\x33\xf8\xb4\x27\xce\x8b\xcb\xdb\xe3\xc7\x79\x5a\x5d\x1c\x5f\xdc\xe6\xfb\xbd\xeb\xe2\x3e\x9d\xcd\x0e\x8d\xde\xbf\x7d\x10\xf9\xc1\x88\xff\x74\x53\xdc\x0d\xdd\x3f\xe1\xa7\xdf\x8e\xa6\x63\x71\x3a\x91\x07\x95\xc7\x52\x6b\x9c\x33\x16\x73\xd4\xb1\xc7\xb5\xd1\xf3\xc2\x54\xae\xab\x8a\x90\x14\x24\x23\xb0\x98\x61\xca\x09\x8d\x66\xb7\xe0\x2a\x45\x51\xd8\x86\x9a\x41\x85\xdd\xa4\xa2\xb1\x11\xf3\x35\x59\xee\x25\x7d\xb4\x90\x92\xb1\x73\xb6\x33\x87\xdc\xeb\xb0\xbd\x64\xa0\x33\x63\x8b\x06\x10\x85\xb2\xb7\x8e\x94\xc9\x50\xa2\x63\xb6\xa1\xb0\x19\x77\x2c\x07\x0d\x96\x13\x08\x96\x59\x53\x30\x92\xc0\x32\xa3\x94\x99\xa1\xce\x99\x33\x95\x4d\x81\x71\x2d\x18\x71\x9b\x03\x05\x51\x58\xae\x73\x55\x6a\xf5\xd6\x0c\x2c\xb9\x6b\xb0\x1f\xd9\x62\x11\xdc\x70\x92\x57\xe8\x28\x68\x7d\xb5\xb9\x5c\x46\xa1\xc2\x2d\xc2\xb0\xc9\xb8\x4d\x68\x7d\xdf\x11\xa2\xb0\x52\x49\x34\xb6\xbb\xcb\xa8\x8f\x18\x47\xed\x5e\x88\xd7\x55\x31\x06\xcb\x4c\xc6\xc4\xaa\x71\x08\xae\xa9\x25\x43\x05\xee\x8d\x52\xfa\xcf\xf8\x46\x5e\xd7\xf8\xba\xab\xc1\x46\x74\x47\x55\x67\x75\xee\x1d\xac\xc6\xff\x66\x51\xb2\x97\x0c\x0d\x71\xb5\x1a\x68\x97\x54\xe0\x94\xa5\x8a\x3b\x17\x7b\x5c\x81\x25\xd6\x3c\xfd\xc5\x22\x68\x81\x41\x73\x1a\xe6\xad\xc1\xfe\x65\xd6\xcc\x8e\x89\xec\x72\xe9\x75\xc2\x9a\x3c\x8e\xac\xd1\x79\xf2\x2a\xaf\xe4\xce\x9d\x71\x54\xb5\xc8\x15\xb6\xd3\x10\x0a\x9c\x76\xb2\x65\xef\x85\xec\x3e\x10\x47\xe5\x36\x0f\x1a\xf1\xb1\x82\xb5\xec\xd6\x68\x9e\xfe\xd8\x58\x01\x16\xc4\xb3\xb8\x88\x36\x76\x53\xeb\xb0\xdb\xca\x49\x26\xb7\xa0\x38\xe1\xb4\x39\x4b\x51\x48\xf2\x3b\xc0\x05\x77\x72\xc4\x55\x05\x3b\xa3\xdd\x3d\xdb\x15\xe2\xae\xbe\x24\x5b\xa1\x28\xdc\xd0\x50\xc7\x36\x15\x46\xb4\x71\x31\xdb\xdf\x62\x61\xb9\xce\x81\xad\x5b\x5b\x1f\xe6\xe5\x32\x22\xbb\x6e\xc1\x62\xf1\x3f\xc7\x54\xa7\x17\xed\x90\x9e\x2b\xae\x47\x42\x62\x37\xae\x2b\xfc\x2d\xd0\x1b\xa3\x7e\x8d\xd2\xf6\x65\x07\x62\xab\x37\x6d\xf1\xa0\xc5\x72\xb9\xd5\xbd\xcd\xd5\x15\x36\x93\x5f\x5b\x1f\x7c\x9f\x5d\x71\x02\x57\x5f\xdc\xa2\x44\x05\xa2\xb9\x94\x05\x6a\xcc\x10\x04\xbb\xe4\x53\x7e\x97\x5a\x2c\x89\xf9\xfe\x9a\xe5\x5a\x87\xb3\xe9\x8f\x7f\x01\x26\x2f\x3f\x00\x93\x9d\xfb\x7f\x98\xfe\x3a\xf8\x13\xc7\xbf\xf4\x0e\xbf\x4d\xe7\x93\xbb\xcf\xd9\xc5\xe4\xfa\x33\xbf\x7a\xcc\xaa\xaf\xa3\xa7\xbf\x9f\xee\x6f\xf4\xc9\xe5\xf1\xa1\xea\x15\x27\x5f\xbf\x0c\xca\xf3\xdf\x8b\xf3\x93\xfe\xd1\xec\xfc\xcb\x20\xbd\xe9\x1f\x0e\x9f\xf8\xeb\xfb\x3f\x0a\x5b\xf9\xab\x05\xbf\xea\x4d\x14\xae\xbe\xd7\xff\x05\x00\x00\xff\xff\x3f\xdc\xc6\xb8\xc1\x07\x00\x00")

func libTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_libTemplatesIndexHtml,
		"lib/templates/index.html",
	)
}

func libTemplatesIndexHtml() (*asset, error) {
	bytes, err := libTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/templates/index.html", size: 1985, mode: os.FileMode(438), modTime: time.Unix(1503416327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/templates/index.html": libTemplatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{libTemplatesIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

