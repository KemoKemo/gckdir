// Code generated by go-bindata.
// sources:
// lib/templates/index.html
// DO NOT EDIT!

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x51\x73\xda\x46\x10\x7e\xcf\x4c\xfe\xc3\x45\xaf\xad\x50\x0d\x6e\x71\x33\x12\x33\x14\x1c\x1b\xc7\x89\x29\x60\x52\xf7\x6d\xb9\x5b\xa4\xc3\xa7\x3b\xe5\x6e\x25\x4c\x29\xff\xbd\x23\x84\x30\x24\xd8\xd3\xf0\x20\xd8\xdd\x6f\x8f\x6f\xbf\x4f\x5a\x85\xef\xfa\x77\xbd\xc9\xc3\xf0\x92\x25\x94\xaa\xce\xdb\x37\x61\xf9\xcd\x14\xe8\x38\xf2\x50\x7b\x9d\xb7\x6f\x18\x0b\x13\x04\xb1\xfd\xc5\x58\x98\x22\x01\xe3\x09\x58\x87\x14\x79\x39\xcd\xfd\x0b\xef\xa8\x96\x10\x65\x3e\x7e\xcd\x65\x11\x79\x7f\xf9\xf7\x5d\xbf\x67\xd2\x0c\x48\xce\x14\x7a\x8c\x1b\x4d\xa8\x29\xf2\x06\x97\x11\x8a\x18\x8f\x5b\x35\xa4\x18\x79\x85\xc4\x65\x66\x2c\x1d\xa0\x97\x52\x50\x12\x09\x2c\x24\x47\x7f\x1b\xfc\xcc\xa4\x96\x24\x41\xf9\x8e\x83\xc2\xe8\x6c\x7f\x92\x92\xfa\x91\x59\x54\x91\xe7\x68\xa5\xd0\x25\x88\xe4\xb1\xc4\xe2\x3c\xf2\x4a\x6e\xee\x7d\x10\xa4\xf0\xc4\x85\x6e\xcc\x8c\x21\x47\x16\xb2\x32\xe0\x26\x0d\xf6\x89\xa0\xd5\x68\x35\xda\x01\x77\xee\x39\xd7\x48\xa5\x6e\x70\xe7\x3c\x26\x35\x61\x6c\x25\xad\x22\xcf\x25\xd0\xba\x38\xf7\xff\x98\x3e\x48\x39\x1e\x7c\xc0\x8f\x67\xe2\x2a\xbd\x19\x75\x1f\x57\x3c\xbf\xee\x5e\x8f\xe2\x56\xf3\x2e\xbd\xe7\xcb\x65\xdb\xe8\xd6\xe8\x41\xc4\xe7\x53\xf8\x69\x98\x8e\x27\xee\x9f\xe0\xe3\x6f\x17\xc5\x4c\x5c\x2e\x92\xf3\xdc\x63\xdc\x1a\xe7\x8c\x95\xb1\xd4\x91\x07\xda\xe8\x55\x6a\x72\xb7\x9f\x8a\x24\x29\xec\x4c\xd1\xca\xb9\xe4\x40\xd2\x68\x36\x42\x97\x2b\x0a\x83\xaa\xb4\x35\x2a\xd8\x3b\x15\xce\x8c\x58\xd5\xcd\xc9\x59\xa7\x2f\x2d\x72\x32\x76\xc5\x4e\x9e\x91\x9c\xd5\xd8\xac\x33\x36\xb9\xe5\xf8\x9e\xad\xd7\x8d\x21\x50\x72\x2b\x1d\x35\xaa\x5c\x19\x6e\x36\x61\x90\x3d\x83\x27\x60\x63\xa4\x63\x70\x95\xfb\x0e\x9c\x34\x3b\x13\x43\xa0\x76\x7f\x5a\x65\x19\x0b\x85\x2c\x18\x57\xe0\x5c\xe4\x81\x42\x4b\x6c\x7b\xf5\xd7\xeb\x46\x05\x6c\x6c\x19\xaf\xaa\x80\xfd\xcb\xac\x59\x76\x89\xec\x66\x53\x8b\xb3\x3b\xc7\x91\x35\x3a\xee\xbc\xd8\x97\x81\x73\x1f\x40\xaa\x92\xd4\x0e\xbb\xe7\x10\x08\x59\xd4\x3c\x83\xa4\x79\x40\xb9\x8f\x04\x52\xb9\xc3\x2c\xc1\x4c\x61\x4d\xb9\x0a\xb6\x57\x7f\x66\xac\x40\x8b\xe2\x99\x58\x48\x07\xcf\x4e\x95\xb0\xc7\xac\x29\xe9\x8c\x50\x01\xc9\x62\x2b\x6f\x18\x50\xf2\x1d\xe0\x1a\x5c\x32\x05\x95\xe3\xc9\xea\xfe\x3e\x38\x55\x02\x67\xf4\x37\xa5\x30\x38\xe0\x50\xd6\x0e\x19\x86\x74\x70\xe3\x54\x9f\xf5\xda\x82\x8e\x91\xd5\xb2\x96\x1e\x6f\x36\x21\xd9\x5a\x82\xf5\xfa\x7f\x5a\x54\x1e\x2f\x2a\x83\x9e\x27\x2e\xed\x20\x71\x1a\xb7\x1f\xfc\x35\xd0\x2b\x36\xbf\xd4\x52\xe9\x72\x02\x71\xa4\x4d\x35\x3c\x6a\xb1\xd9\x1c\xa9\x77\xf8\x68\x05\x5b\xe7\xeb\xe8\x9d\xef\xb3\x5b\x20\x74\xc4\xb8\x49\x33\xa9\x50\x30\xd0\x82\xa5\x52\xcb\xb9\x44\xc1\x6e\xa0\x80\x31\xb7\x32\x23\xe6\xfb\x75\x97\xab\x12\xce\xf2\x1f\xdf\x50\x8b\x6f\x17\xd4\xe2\xe4\x7e\x9a\xf0\x5f\x07\x7f\xca\xd9\x2f\xcd\xf6\xd7\x62\xb5\x18\x7f\x9a\x5f\x2f\xee\x3e\xc1\xed\xe3\x3c\xff\x32\x7d\xfa\xfb\xe9\x7e\xa8\x7b\x37\xdd\xb6\x6a\xa6\xbd\x2f\x9f\x07\xd9\xd5\xef\xe9\x55\xaf\x7f\xb1\xbc\xfa\x3c\xe0\xc3\x7e\x7b\xf2\x04\x2f\xef\xa7\x30\xa8\xe8\xef\x16\xd0\x4e\x9b\x30\xd8\xbd\x4f\xfe\x0b\x00\x00\xff\xff\x7d\x54\x5a\x1d\x61\x06\x00\x00")

func libTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_libTemplatesIndexHtml,
		"lib/templates/index.html",
	)
}

func libTemplatesIndexHtml() (*asset, error) {
	bytes, err := libTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/templates/index.html", size: 1633, mode: os.FileMode(438), modTime: time.Unix(1498263746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/templates/index.html": libTemplatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{libTemplatesIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
